Common Problem:-

slection & buble(1.1)(Done!!)

Binary Search(1.2)(Done!!)

Merge Sort & quick search(1.3)

Matrix shorting(1.4)

structure Searching(1.5)

Bit wise (1.6)





------------------------------------------------------

{(2)

KMP Algorithm (2.2)

 Naive Pattern Searching(2.1) 

(Rabin-Karp Algorithm)(2.5)

Program for sorting variables of any data type(2.3)

string search/char/ array pointer string(2.4)

}

----------------------------------------------

Dynamic searching!!

Get Basic knowlege of stack ,Queue,List ,Vactor ,STL


{Tree Sort(3.1)

Bucket Sort(3.2)

Merge Sort for Linked Lists(3.3)

Bitonic Sort(3.4)

BFS,DFS(3.5)

Shortest Path from source to all vertices **Dijkstra**(3.6)

}

--------------------------------------------------

horting&Searching.cpp



   Created on: 02-Sep-2018

       Author: barun Prakash

       Objective to enhance coding skills.....





 This specific topic has designed to cover the basic understanding of program which includes

 ARRY ,STRING,NUMBER,STRUCTURE,TREE,LINKED LIST,HASH,GRAPH!!



 Array Shorting

 Selection  ,Bauble ,Insertion ,Merge,Quick search,Heap search ,Radix,bucket ,sleep.../Thread short etc

 string string Aray ,arraypointer............etc

 long int x= 0x1234567=> convert ox765421



*/


/*

 *Linear Array Search(Static and DYnamic)

 *2D .Matrix search

 *

 *

 */

/* importanten

 * selection short

binary search (Done)

counting search

merge

buket

Negative number search

int x  = x4534781; search

string searching

Matrix searching

*********************************************

sleep

bitonic

tree

structure shorting

string searching

string searching /Z algorithm (Hash searching)

array pointer for string

Aho-Corasick Algorithm for Pattern Searching

---------------------------------------------------

DFS ,BFS

Shortest Path from source to all vertices **Dijkstra**

Shortest Path from every vertex to every other vertex **Floyd Warshall**

Minimum Spanning tree **Prim**

Minimum Spanning tree **Kruskal**

Topological Sort

Johnsonâ€™s algorithm

Articulation Points (or Cut Vertices) in a Graph

Bridges in a graph

*/


uint8_t BinarySearchForArr_searchAndReturnPosition(uint8_t *Aptr,uint8_t LastPos,uint8_t ZerothPos)

{



  uint8_t MidPos = 0;

 uint8_t item_to_search =6;


  for(;ZerothPos<=LastPos && item_to_search!=Aptr[MidPos];)

 {


   MidPos=(LastPos + ZerothPos)/2;

  if(item_to_search > Aptr[MidPos])

  {

   ZerothPos =  MidPos+1;

  }

  else if(item_to_search < Aptr[MidPos])

  {

   LastPos =  MidPos -1;

  }

  else if(ZerothPos> LastPos)

  {


    printf("item now found and return!!");

   return 0;

  }

  else if(item_to_search ==Aptr[MidPos])

  {

   return Aptr[MidPos];

  }

  else

  {

   /*Do nothing*/

  }


  }

}


//Merge Sort

void shortThroughSelection(uint8_t *arr,uint8_t arrSize ,uint8_t powA ,uint8_t powB)

{


  uint8_t rowA_u8=0,rowB_u8;


  for(;rowA_u8 < arrSize ; rowA_u8++)

 {

  for( rowB_u8=rowA_u8+1;rowB_u8  < arrSize ; rowB_u8++)

  {

   if(arr[rowA_u8]>arr[rowB_u8])

   {

    arr[rowA_u8]=arr[rowA_u8]^arr[rowB_u8];

    arr[rowB_u8]=arr[rowA_u8]^arr[rowB_u8];

    arr[rowA_u8]=arr[rowA_u8]^arr[rowB_u8];

   }


   }

 }

 arr[0]=arr[powA] +arr[powB];

}


// Navi pattern searching

void paternSearch(char *text ,char *pat)

{


  uint8_t textLen =strlen(text) ,textMov=0;

 uint8_t patlen = strlen(pat) ,patMov =0;


  for(; textMov<(textLen-patlen); textLen++)

 {

  for( ; patMov < patlen;  patlen++)

  {

   if(text[textMov+patMov]!= pat[patMov])

   {

    break;

   }

  }


   if(patlen ==patMov)


   {

   printf("IndexPos:-%d \n",textMov);

  }

 }



}


void shortThroughBubleShort(uint8_t *arr,uint8_t arrSize )

{


  uint8_t rowA_u8=0,rowB_u8;


  for(;rowB_u8 < arrSize-1 ; rowB_u8++)

 {

  for( rowA_u8=0 ;rowA_u8  < arrSize-1-rowB_u8 ; rowA_u8++)

  {

   if(arr[rowA_u8]>arr[rowA_u8+1])

   {

    arr[rowA_u8]=arr[rowA_u8]^arr[rowA_u8 +1];

    arr[rowA_u8+1]=arr[rowA_u8]^arr[rowA_u8 +1];

    arr[rowA_u8]=arr[rowA_u8]^arr[rowA_u8+1];

   }


   }

 }


}



//binary Search

int BinarySearchForArr(int arr[], int l, int r, int x)

{

   if (r >= l)

   {

        int mid = l + (r - l)/2;



        if (arr[mid] == x)

            return mid;



        if (arr[mid] > x)

            return BinarySearchForArr(arr, l, mid-1, x);



        return BinarySearchForArr(arr, mid+1, r, x);

   }


   return -1;

}


//

template < typename T>


void Genericsearch(T arr[],char size)

{


  bool on=1;

 while(on)

 {

  on =0;

  for(uint32_t movArr=0;movArr < size-1 ;movArr)

  {

   if(arr[movArr] > arr[movArr+1])

   {

    T temp =arr[movArr];

    arr[movArr+1] = arr[movArr];

    arr[movArr] =temp;

    on =1;

   }

  }

 }


}
